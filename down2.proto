//服务器回应客户端请求协议模块
//by lj 2015-11

syntax = "proto2";
import "common2.proto";
package down;

//-------------------------通用协议--------------------------------------
//获取用户信息
message get_user_info {
    repeated user_base_info_struct   _user_base_info       = 1; // 用户基本信息
}

message send_private_msg {
    optional int64 _uid      = 1;
    optional string _sub_type = 2;
    optional string _msg      = 3;
    optional int64  _service_time = 4; // 服务器收到消息时的服务器时间
}

// 此消息不会真正返回，仅作为生成请求的协议号用，具体返回通过send_private_msg统一代替
message get_offline_private_msg {
}

message set_ranking_score {
    optional string _name   = 1;
    optional string _key    = 2;
    optional int64  _score  = 3;
}

message get_ranking {
    optional string _name     = 1;
    optional ranking_data_struct _key_data      = 2; // 除_top_num指定的排行外额外需要包含的项
    optional int64  _key_ranking  = 3;
    repeated ranking_data_struct _data = 4;
}

message set_like {
    optional string _key      = 1; // 例如uid
    optional bool   _like     = 2; // 喜欢/关注|取消关注
    optional int64  _uid_num  = 3; // 最新喜欢数
    repeated int64 _uid_list  = 4; // 喜欢的用户列表
    repeated int64 _uid_robot_list = 5; // 指定uid喜欢，用于运营中机器人机制代替当前管理帐户
}

message get_like_num {
    repeated string _key_list      = 1; // 例如{uid}
    repeated int64  _uid_num_list  = 2; // 与_key_list索引对应喜欢数
    repeated bool   _like_list     = 3; // 与_key_list索引对应key当前用户是否喜欢
}

message get_like_list {
    optional string _key      = 1; // 例如uid
    repeated int64 _uid_list  = 2;
}
//-------------------------通用协议--------------------------------------

//-------------------------消息管理--------------------------------------
message create_channel {
  optional channel_struct _info  = 1;
}

message destroy_channel {
  optional string _channel = 1;
}

message publish_channel_msg {
    optional int64                  _uid                  = 1;
    optional string                 _channel              = 2;
    optional string                 _sub_type             = 3;
    optional string                 _msg                  = 4; // 可以为普通对象类型，sdk回调应用层前将会把此数据json解析出来
    optional int64                  _service_time         = 5; // 服务器收到消息时的服务器时间
    optional int64                  _service_seq          = 6; // 服务器收到消息的序号，每个channel独立计算，从0开始
    optional int64                  __system_param        = 7; // 系统sdk使用参数，应用层不会使用
}

message subscribe_channel {
  optional channel_struct _info  = 1;
}

message unsubscribe_channel {
    optional string                  _channel              = 1;
}

// 主要用于会引发对channel进行修改的相关协议操作后的广播通知，如：modify_channel及unsubscribe_channel(会引发master_change)等，注意：这里我们采用增量更新模式，非全量模式，主要针对_allow_publish_users、_ban_publish_users、_public_data等字段；除了publish_channel_msg其余数据和状态变化均用此协议通知
message modify_channel {
  optional string _channel      = 1;
  optional bool _master_changed   = 2;
  optional int64 _master   = 3;
  optional bool _password_changed   = 4;
  optional string _password   = 5;
  optional bool _allow_publish_users_changed   = 6;
  repeated int64 _allow_publish_users   = 7; // 通过-uid来表示删除，为空表示删除列表
  optional bool _ban_publish_users_changed   = 8;
  repeated int64 _ban_publish_users   = 9; // 通过-uid来表示删除，为空表示删除列表
  optional bool _allow_entry_changed   = 10;
  optional bool _allow_entry   = 11;
  optional bool _public_data_changed   = 12;
  repeated key_data_struct _public_data      = 13;
  optional bool _name_changed   = 14;
  optional string _name      = 15;
  // 以下4个用户事件区别借用publish_channel_msg方案：此套方案为即时消息模式，不会记入历史消息队列中，离线用户将接收不到此类消息；消息模式方案则反之；理论上应做到两套方案不影响用户使用接口，只影响逻辑意义细节；偏向于后续调整为此套方案
  optional int64 _user_join   = 16;
  optional int64 _user_leave   = 17;
  optional int64 _user_online   = 18;
  optional int64 _user_offline   = 19;
  optional int64 _service_time   = 20; // 毫秒，主要为兼容publish_channel_msg模式用，后期可考虑替换完旧有代码后删除
  optional int64 _uid   = 21; // 命令原始请求者
  optional bool _allow_entry_millisecond_changed   = 22;
  optional int64 _allow_entry_millisecond   = 23;
  optional bool _invite_uid_list_changed   = 24;
  repeated int64 _invite_uid_list   = 25;
  optional bool _remove_uid_list_changed   = 26;
  repeated int64 _remove_uid_list   = 27;
  optional bool _only_robot_auto_destroy_changed   = 28;
  optional bool _only_robot_auto_destroy   = 29;
  optional bool _client_request_msg_changed   = 30;
  optional bool _client_request_msg   = 31;
  optional bool _remove_msg_service_seq_list_changed   = 32;
  repeated int64 _remove_msg_service_seq_list   = 33;
  optional bool _use_update_mode = 99;
}

message get_channel_public_data {
  optional string _channel  = 1;
  repeated key_data_struct _public_data = 2;
}
//-------------------------消息管理--------------------------------------


//-------------------------文件存储--------------------------------------
message get_file_list {
  optional string _path  = 1;
  repeated file_meta_info_struct _files  = 2;
}

message create_dir {
  optional string _path = 1;
  optional string _name = 2;
}

message create_file {
  optional string _path = 1;
  optional string _name = 2;
}

message read_file {
  optional string _path = 1;
  optional bool _for_bin = 2;
  optional string _data = 3;
}

message write_file {
  optional string _path = 1;
  optional bool _continued = 2; // 数据分包待续
}

message rename_file {
  optional string _path = 1;
  optional string _name = 2;
  optional string _new_name = 3;
}

message rename_dir {
  optional string _path = 1;
  optional string _name = 2;
  optional string _new_name = 3;
}

message move_file {
  optional string _from_path = 1;
  optional string _to_path = 2;
}

message move_dir {
  optional string _from_path = 1;
  optional string _to_path = 2;
}

message del_file {
  optional string _path = 1;
}

message del_dir {
  optional string _path = 1;
}

message share_file {
  optional share_file_struct _share_file = 1;
}

message get_self_share_file {
  repeated share_file_struct _share_file = 1;
}

message get_share_file {
  repeated share_file_struct _share_file = 1;
  optional int64 _number_per_page   = 2; // 每页获取数量
  optional int64 _page_index   = 3; // 获取的页索引
}

message search_public_share_file {
  repeated share_file_struct _share_file = 1;
}

message mount_share_file {
  optional int64 _uid          = 1; // 挂载的其他用户，服务器验证该资源是否被分享给当前用户或为公开分享资源
  optional int64 _appid        = 2; // 挂载的其他用户开发的appid
  optional string _path         = 3; // 挂载的其他用户分享文件系统的路径
  repeated file_meta_info_struct _files  = 4; // 此时的路径均是相对于_path参数下的子路径，且此后直到退出登录或断线或请求unmount_share_file之前的所有文件接口均为相对此分享路径下的子路径
}

message unmount_share_file {
  // 后续文件系统接口恢复为针对自己的文件系统资源
  repeated file_meta_info_struct _files  = 1; // 自身文件系统根目录下文件列表
}
//-------------------------文件存储--------------------------------------


//-------------------------对象存储--------------------------------------
message store_set {
}

message store_update {
}

message store_remove {
  optional string _key         = 2; // 默认为根路径，key可以包含【.】为多级结构
}

message store_get {
  optional string _key         = 1; // key可以包含【.】为多级结构
  optional string _data        = 2; // 为json字符串，sdk会将其转换为js对象再传给app
}

message store_increase {
  optional string _key         = 1; // key可以包含【.】为多级结构
  optional int64 _val          = 2; // _val可为正负数及0
  optional int64 _cur          = 3; // 增加_add之后的最新当前值
}
//-------------------------对象存储--------------------------------------
